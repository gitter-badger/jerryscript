
--- Script parsing start ---

  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:1->ident(x)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:2->ident(y)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:3->ident(z)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_BACKWARD
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:1->ident(x)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:2->ident(y)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:3->ident(z)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_BACKWARD
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:1->ident(x)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_IDENT idx:2->ident(y)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_IDENT idx:3->ident(z)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_BACKWARD
  [  0] CBC_JUMP_BACKWARD
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:1->ident(x)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_IDENT idx:4->ident(a)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_IDENT idx:5->ident(b)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:1->ident(x)
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:2->ident(y)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_BACKWARD
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:1->ident(x) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_IDENT idx:7->ident(outer_label)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_IDENT idx:7->ident(outer_label)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:1->ident(x) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_BACKWARD
  [  1] CBC_BINARY_ADD_TWO_LITERALS idx:4->var_ident(a) idx:5->var_ident(b)
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_PUSH_IDENT idx:6->var_ident(c)
  [  0] CBC_CALL_IDENT idx:5->var_ident(b) byte_arg:1
  [  1] CBC_PUSH_IDENT idx:6->var_ident(c)
  [  0] CBC_POP
  [  0] CBC_POST_INCR_IDENT idx:4->var_ident(a)
  [  1] CBC_LESS_TWO_LITERALS idx:5->var_ident(b) idx:6->var_ident(c)
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

Final byte code dump:

  Maximum stack depth: 4
  Literal encoding: small
  Argument range end: 0
  Register range end: 3
  Identifier range end: 8
  Literal range end: 8

   0 : CBC_PUSH_IDENT idx:3(ident)->ident(next_statement)
   2 : CBC_POP_BLOCK
   3 : CBC_JUMP_FORWARD offset:15(->18)
   5 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:4(ident)->ident(x)
   7 : CBC_POP_BLOCK
   8 : CBC_JUMP_FORWARD offset:12(->20)
  10 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:5(ident)->ident(y)
  12 : CBC_POP_BLOCK
  13 : CBC_JUMP_FORWARD offset:5(->18)
  15 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:6(ident)->ident(z)
  17 : CBC_POP_BLOCK
  18 : CBC_JUMP_BACKWARD offset:13(->5)
  20 : CBC_PUSH_IDENT idx:3(ident)->ident(next_statement)
  22 : CBC_POP_BLOCK
  23 : CBC_JUMP_FORWARD offset:15(->38)
  25 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:4(ident)->ident(x)
  27 : CBC_POP_BLOCK
  28 : CBC_JUMP_FORWARD offset:12(->40)
  30 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:5(ident)->ident(y)
  32 : CBC_POP_BLOCK
  33 : CBC_JUMP_FORWARD offset:5(->38)
  35 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:6(ident)->ident(z)
  37 : CBC_POP_BLOCK
  38 : CBC_JUMP_BACKWARD offset:13(->25)
  40 : CBC_PUSH_IDENT idx:3(ident)->ident(next_statement)
  42 : CBC_POP_BLOCK
  43 : CBC_JUMP_FORWARD offset:17(->60)
  45 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:4(ident)->ident(x)
  47 : CBC_POP_BLOCK
  48 : CBC_JUMP_FORWARD offset:12(->60)
  50 : CBC_PUSH_IDENT idx:5(ident)->ident(y)
  52 : CBC_POP_BLOCK
  53 : CBC_JUMP_FORWARD offset:5(->58)
  55 : CBC_PUSH_IDENT idx:6(ident)->ident(z)
  57 : CBC_POP_BLOCK
  58 : CBC_JUMP_BACKWARD offset:13(->45)
  60 : CBC_JUMP_BACKWARD offset:15(->45)
  62 : CBC_PUSH_IDENT idx:3(ident)->ident(next_statement)
  64 : CBC_POP_BLOCK
  65 : CBC_JUMP_FORWARD offset:26(->91)
  67 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:4(ident)->ident(x)
  69 : CBC_POP_BLOCK
  70 : CBC_JUMP_FORWARD offset:14(->84)
  72 : CBC_JUMP_FORWARD offset:16(->88)
  74 : CBC_PUSH_IDENT idx:0(reg)->var_ident(a)
  76 : CBC_POP_BLOCK
  77 : CBC_JUMP_FORWARD offset:16(->93)
  79 : CBC_JUMP_FORWARD offset:9(->88)
  81 : CBC_PUSH_IDENT idx:1(reg)->var_ident(b)
  83 : CBC_POP_BLOCK
  84 : CBC_PUSH_IDENT idx:4(ident)->ident(x)
  86 : CBC_BRANCH_IF_TRUE_BACKWARD offset:14(->72)
  88 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:5(ident)->ident(y)
  90 : CBC_POP_BLOCK
  91 : CBC_JUMP_BACKWARD offset:24(->67)
  93 : CBC_PUSH_IDENT idx:3(ident)->ident(next_statement)
  95 : CBC_POP_BLOCK
  96 : CBC_JUMP_FORWARD offset:41(->137)
  98 : CBC_JUMP_FORWARD offset:26(->124)
 100 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:4(ident)->ident(x)
 103 : CBC_POP_BLOCK
 104 : CBC_JUMP_FORWARD offset:18(->122)
 106 : CBC_PUSH_IDENT idx:7(ident)->ident(outer_label)
 108 : CBC_POP_BLOCK
 109 : CBC_JUMP_FORWARD offset:20(->129)
 111 : CBC_JUMP_FORWARD offset:18(->129)
 113 : CBC_PUSH_IDENT idx:7(ident)->ident(outer_label)
 115 : CBC_POP_BLOCK
 116 : CBC_JUMP_FORWARD offset:8(->124)
 118 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:4(ident)->ident(x)
 121 : CBC_POP_BLOCK
 122 : CBC_JUMP_BACKWARD offset:22(->100)
 124 : CBC_BINARY_ADD_TWO_LITERALS idx:0(reg)->var_ident(a) idx:1(reg)->var_ident(b)
 127 : CBC_BRANCH_IF_TRUE_BACKWARD offset:27(->100)
 129 : CBC_PUSH_IDENT idx:2(reg)->var_ident(c)
 131 : CBC_CALL_IDENT byte_arg:1 idx:1(reg)->var_ident(b)
 134 : CBC_PUSH_IDENT idx:2(reg)->var_ident(c)
 136 : CBC_POP
 137 : CBC_POST_INCR_IDENT idx:0(reg)->var_ident(a)
 139 : CBC_LESS_TWO_LITERALS idx:1(reg)->var_ident(b) idx:2(reg)->var_ident(c)
 142 : CBC_BRANCH_IF_TRUE_BACKWARD offset:44(->98)
 144 : CBC_PUSH_IDENT idx:3(ident)->ident(next_statement)
 146 : CBC_POP_BLOCK
 147 : CBC_RETURN_WITH_UNDEFINED

Byte code size: 148 bytes

Script parsing successfully completed. Total byte code size: 148 bytes

--- Script parsing end ---

